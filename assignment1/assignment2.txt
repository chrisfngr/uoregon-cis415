Joseph Yaconelli
CIS 415
Assignment 2

1.
a) I would create one thread for input and one for output, because the bottle neck is the disk, so it doesn't make
sense to use more than one thread, since it won't go any faster, since the thread still has to wait on the I/O.

b) I would create 4 threads for the CPU-intensive portion. Since this is all computation, it makes sense to
utilize every core, but not to use more threads than cores available, because that doesn't give you access to
anymore computing power, and just adds overhead.

2.
a) If you have less kernel threads than processing cores, then you are under-utilizing the processing power of the
computer, as one or more cores will have no work to do. Meanwhile, the kernel threads will have to do context
switches between the multiple user-level threads, since multiple user-level threads map to kernel threads since
the number of user-level threads is greater than the number of kernel threads.

b) If the number of kernel threads equals the number of processing cores, then as long as no threads are blocking,
the CPU use is optimized. However, if a kernel thread needs to wait for anything (i.e. asynch I/O), then there's
nothing else that can run on that core while it's waiting, meaning again the CPU's power will be under-utilized.

c) If the number of kernel threads is greater than processing cores, but less than the number of user-level threads,
then the processors will be able to always have a kernel thread on each processor at all times, and if a kernel
thread needs to wait for something (again, i.e. asynch I/O), then another kernel thread can run on that processor,
ensuring that all cores will almost always be utilized.


3.
This short-term scheduling algorithm will favor I/O because since I/O is generally very slow compared to other
operations, it will have spent the recent past getting data or placing data, which doesn't use the CPU. However,
CPU-bound programs won't be starved because I/O is slow enough, that it isn't always happening, so there will be
times when there's nothing for the processor to do, so it will schedule the CPU-bound programs.

4.
a)
Optimizing CPU utilization could mean continuing to compute rather than sending an output to I/O, since that could
mean waiting for I/O to complete, and therefore under-utilizing the CPU. However, this means that the response
time is increased.
Optimizing response time could mean interrupting computation very frequently to update the user on progress.
However, this can force the CPU to wait for I/O to finish before continuing to compute, and could also means more
context switches. Both of these redue CPU utilization.

b)
Average turnaround time is optimized by trying to finish tasks as soon as possible, which can be in direct
conflict with a technique in minimizing waiting time by breaking up longer jobs to make sure shorter ones
are always getting finished.
Optimizing wait time could be done by always running the task that takes the least amount of time, however, this
could increase turnaround time, as a certain process might continually be scheduled behind other shorter processes
because it will take longer to finish.

c)
I/O Device utilization can mean there's nothing in the ready queue for the CPU because processes are all in the
waiting queue, pending on the return of data from I/O, thereby leaving the CPU with nothing to do and thereby
under-utilizing the CPU.
Maximizing CPU utilization can mean rarely making I/O calls, because they put the process in the waiting queue,
and thereby can decrease CPU utilization. However, rarely making I/O calls then under-utilizes I/O devices.

5.
a)
Rate monotonic scheduling works by assigning priorities to each tast at the time the task is created based on the
period they need to complete. The shorter the time, the higher the priority.
RM is classified as a fixed-priority algorithm because the priorities are assigned at the creation of each task,
and are never modified after that.

b)

i)
It is feasible because it satisfies the sufficient condition
1/4 + 2/8 + 2/20 < 3(2^(1/3) - 1)
=> .6 < 0.7798...

ii)
Although the given tasks do not satisfy the sufficient condition
1/4 + 2/8 + 2/20 + 1/5 < 4(2^(1/4) - 1)
This doesn't mean that there isn't a feasible schedule, as this condition isn't a necessary condition, rather
is only sufficient in proving that there exists a feasible schedule. It cannot prove that there ISN'T a feasible
schedule.

Gantt Chart

T4 |       |====   |       |       |
---|--------------------------------
T3 |       |       |       |=======|
---|--------------------------------
T2 |       |       |=======|       |
---|--------------------------------
T1 |====   |       |       |       |
   |--------------------------------
   0   1   2   3   4   5   6   7   8

T4 |       |====   |       |       |
---|--------------------------------
T3 |       |       |       |=======|
---|--------------------------------
T2 |       |       |=======|       |
---|--------------------------------
T1 |====   |       |       |       |
   |--------------------------------
   8   9   10  11  12  13  14  15  16

T4 |       |====   |       |       |
---|--------------------------------
T3 |       |       |       |=======|
---|--------------------------------
T2 |       |       |=======|       |
---|--------------------------------
T1 |====   |       |       |       |
   |--------------------------------
   16  17  18  19  20  21  22  23  24

T4 |       |====   |       |       |
---|--------------------------------
T3 |       |       |       |=======|
---|--------------------------------
T2 |       |       |=======|       |
---|--------------------------------
T1 |====   |       |       |       |
   |--------------------------------
   24  25  26  27  28  29  30  31  32

T4 |       |====   |       |       |
---|--------------------------------
T3 |       |       |       |=======|
---|--------------------------------
T2 |       |       |=======|       |
---|--------------------------------
T1 |====   |       |       |       |
   |--------------------------------
   32  33  34  35  36  37  38  39  40

This guarantees a feasible schedule because this schedule meets all deadlines during the hyperperiod, 40 (which
is the least common multiple of all the periods), and therefore can continue to meet deadlines for any period.


(TJ LaGrow and I worked on the concept of how to draw the Gantt chart using ASCII characters, but did not work
on the solution to the problem together.)
